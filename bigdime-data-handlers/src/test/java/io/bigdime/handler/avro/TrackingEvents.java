/**
 * Copyright (C) 2015 Stubhub.
 */
/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package io.bigdime.handler.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TrackingEvents extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TrackingEvents\",\"namespace\":\"io.bigdime.handler.avro\",\"fields\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"events\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TrackingEvent\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"default\":null},{\"name\":\"timestamp\",\"type\":[\"null\",\"string\"],\"default\":null}]},\"java-class\":\"java.util.List\"}},{\"name\":\"context\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence account;
  @Deprecated public java.util.List<io.bigdime.handler.avro.TrackingEvent> events;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> context;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TrackingEvents() {}

  /**
   * All-args constructor.
   */
  public TrackingEvents(java.lang.CharSequence account, java.util.List<io.bigdime.handler.avro.TrackingEvent> events, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> context) {
    this.account = account;
    this.events = events;
    this.context = context;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return account;
    case 1: return events;
    case 2: return context;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: account = (java.lang.CharSequence)value$; break;
    case 1: events = (java.util.List<io.bigdime.handler.avro.TrackingEvent>)value$; break;
    case 2: context = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'account' field.
   */
  public java.lang.CharSequence getAccount() {
    return account;
  }

  /**
   * Sets the value of the 'account' field.
   * @param value the value to set.
   */
  public void setAccount(java.lang.CharSequence value) {
    this.account = value;
  }

  /**
   * Gets the value of the 'events' field.
   */
  public java.util.List<io.bigdime.handler.avro.TrackingEvent> getEvents() {
    return events;
  }

  /**
   * Sets the value of the 'events' field.
   * @param value the value to set.
   */
  public void setEvents(java.util.List<io.bigdime.handler.avro.TrackingEvent> value) {
    this.events = value;
  }

  /**
   * Gets the value of the 'context' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getContext() {
    return context;
  }

  /**
   * Sets the value of the 'context' field.
   * @param value the value to set.
   */
  public void setContext(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.context = value;
  }

  /** Creates a new TrackingEvents RecordBuilder */
  public static io.bigdime.handler.avro.TrackingEvents.Builder newBuilder() {
    return new io.bigdime.handler.avro.TrackingEvents.Builder();
  }
  
  /** Creates a new TrackingEvents RecordBuilder by copying an existing Builder */
  public static io.bigdime.handler.avro.TrackingEvents.Builder newBuilder(io.bigdime.handler.avro.TrackingEvents.Builder other) {
    return new io.bigdime.handler.avro.TrackingEvents.Builder(other);
  }
  
  /** Creates a new TrackingEvents RecordBuilder by copying an existing TrackingEvents instance */
  public static io.bigdime.handler.avro.TrackingEvents.Builder newBuilder(io.bigdime.handler.avro.TrackingEvents other) {
    return new io.bigdime.handler.avro.TrackingEvents.Builder(other);
  }
  
  /**
   * RecordBuilder for TrackingEvents instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TrackingEvents>
    implements org.apache.avro.data.RecordBuilder<TrackingEvents> {

    private java.lang.CharSequence account;
    private java.util.List<io.bigdime.handler.avro.TrackingEvent> events;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> context;

    /** Creates a new Builder */
    private Builder() {
      super(io.bigdime.handler.avro.TrackingEvents.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(io.bigdime.handler.avro.TrackingEvents.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.account)) {
        this.account = data().deepCopy(fields()[0].schema(), other.account);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.events)) {
        this.events = data().deepCopy(fields()[1].schema(), other.events);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.context)) {
        this.context = data().deepCopy(fields()[2].schema(), other.context);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TrackingEvents instance */
    private Builder(io.bigdime.handler.avro.TrackingEvents other) {
            super(io.bigdime.handler.avro.TrackingEvents.SCHEMA$);
      if (isValidValue(fields()[0], other.account)) {
        this.account = data().deepCopy(fields()[0].schema(), other.account);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.events)) {
        this.events = data().deepCopy(fields()[1].schema(), other.events);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.context)) {
        this.context = data().deepCopy(fields()[2].schema(), other.context);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'account' field */
    public java.lang.CharSequence getAccount() {
      return account;
    }
    
    /** Sets the value of the 'account' field */
    public io.bigdime.handler.avro.TrackingEvents.Builder setAccount(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.account = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'account' field has been set */
    public boolean hasAccount() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'account' field */
    public io.bigdime.handler.avro.TrackingEvents.Builder clearAccount() {
      account = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'events' field */
    public java.util.List<io.bigdime.handler.avro.TrackingEvent> getEvents() {
      return events;
    }
    
    /** Sets the value of the 'events' field */
    public io.bigdime.handler.avro.TrackingEvents.Builder setEvents(java.util.List<io.bigdime.handler.avro.TrackingEvent> value) {
      validate(fields()[1], value);
      this.events = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'events' field has been set */
    public boolean hasEvents() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'events' field */
    public io.bigdime.handler.avro.TrackingEvents.Builder clearEvents() {
      events = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'context' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getContext() {
      return context;
    }
    
    /** Sets the value of the 'context' field */
    public io.bigdime.handler.avro.TrackingEvents.Builder setContext(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.context = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'context' field has been set */
    public boolean hasContext() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'context' field */
    public io.bigdime.handler.avro.TrackingEvents.Builder clearContext() {
      context = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public TrackingEvents build() {
      try {
        TrackingEvents record = new TrackingEvents();
        record.account = fieldSetFlags()[0] ? this.account : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.events = fieldSetFlags()[1] ? this.events : (java.util.List<io.bigdime.handler.avro.TrackingEvent>) defaultValue(fields()[1]);
        record.context = fieldSetFlags()[2] ? this.context : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
